%define buildarch %BUILDARCH%
%define BEEGFS_COMMON_PACKAGE_PATH %BEEGFS_COMMON_PACKAGE_PATH%
%define MAKE_CONCURRENCY %MAKE_CONCURRENCY%
%define NEED_DEBUG_DEFINE %NEED_DEBUG_DEFINE%
%define BEEGFS_VERSION %BEEGFS_VERSION%
%define VER %(echo '%{BEEGFS_VERSION}' | cut -d - -f 1)
%define BEEGFS_RELEASE_STR %(echo '%{BEEGFS_VERSION}-' | cut -d - -f 2)
%define EPOCH %(echo '%{VER}' | cut -d . -f 1)

%define is_fedora %(test -e /etc/fedora-release && echo 1 || echo 0)
%define is_redhat %(test -e /etc/redhat-release && echo 1 || echo 0)
%define is_suse %(test -e /etc/SuSE-release && echo 1 || echo 0)
%define is_mandrake %(test -e /etc/mandrake-release && echo 1 || echo 0)

%if %is_mandrake
%define disttag mdk
%endif

%if %is_suse
%define disttag suse
%define distver %(relpackage="`rpm -qf /etc/SuSE-release`"; release="`rpm -q --queryformat='%{VERSION}' $relpackage 2> /dev/null | tr . : | sed s/:.*$//g`" ; if test $? != 0 ; then release="" ; fi ; echo "$release")
%endif

%if %is_fedora
%define disttag fc
%endif

%if %is_redhat
%define disttag el
%define distver %(relpackage="`rpm -qf /etc/redhat-release`"; release="`rpm -q --queryformat='%{VERSION}' $relpackage 2> /dev/null | tr . : | sed s/:.*$//g`" ; if test $? != 0 ; then release="" ; fi ; echo "$release")
%endif

%if %{defined disttag}
%define RELEASE %{BEEGFS_RELEASE_STR}%{disttag}%{distver}
%else
%define RELEASE %{BEEGFS_RELEASE_STR}generic
%endif

%define FULL_VERSION %{EPOCH}:%{VER}-%{RELEASE}

#
# beegfs-helperd RPM creator
#
Summary: BeeGFS client helper daemon
Name: %NAME%
Version: %{VER}
Release: %{RELEASE}
License: BeeGFS EULA
Group: Software/Other
Source: %NAME%-%{BEEGFS_VERSION}.tgz
URL: http://www.beegfs.com
Vendor: Fraunhofer ITWM
BuildRoot: %{_tmppath}/%NAME%-root
BuildArch: %{buildarch}
requires: beegfs-opentk-lib = %{FULL_VERSION}, beegfs-common = %{FULL_VERSION}
Epoch: %{EPOCH}

%description
The package contains the BeeGFS helper daemon.


%if %{NEED_DEBUG_DEFINE}
%debug_package
%endif

%clean
rm -rf %{buildroot}

%prep
%setup -c

%build
cd build
make \
	"root-dir=%{ROOT_DIR}" \
	BEEGFS_VERSION=%{BEEGFS_VERSION}		\
	-j%{MAKE_CONCURRENCY}

	
%install
cd build
echo "mkdir RPM_BUILD_ROOT (${RPM_BUILD_ROOT})"
mkdir -p ${RPM_BUILD_ROOT}/etc/beegfs/
cp -a dist/etc/*.conf ${RPM_BUILD_ROOT}/etc/beegfs/
mkdir -p ${RPM_BUILD_ROOT}/etc/init.d/

# we use the redhat script for all rpm distros, as we now provide our own
# daemon() and killproc() function library (derived from redhat)
INITSCRIPT="dist/etc/init.d/%NAME%.init"
install -D $INITSCRIPT ${RPM_BUILD_ROOT}/etc/init.d/%NAME%

#install systemd unit description
install -D -m644 dist/usr/lib/systemd/system/%NAME%.service \
	${RPM_BUILD_ROOT}/usr/lib/systemd/system/%NAME%.service

#add the genric part of the init script from the common package
GENERIC_INITSCRIPT=%{BEEGFS_COMMON_PACKAGE_PATH}/build/dist/etc/init.d/beegfs-service.init
cat $GENERIC_INITSCRIPT >> ${RPM_BUILD_ROOT}/etc/init.d/%NAME%

install -D %NAME% ${RPM_BUILD_ROOT}/opt/beegfs/sbin/%NAME%

install -D  dist/etc/default/%NAME% ${RPM_BUILD_ROOT}/etc/default/%NAME%

%post
if [ "$1" = 1 ]
then
	output=$(systemctl is-system-running 2> /dev/null)
	if [ "$?" == 127 ]
	then
		chkconfig %NAME% on
	elif [ "$?" == 0 ] || ( [ "$output" != "offline" ] && [ "$output" != "unknown" ] )
	then
		systemctl enable %NAME%.service
	else
		chkconfig %NAME% on
	fi
fi

%preun
if [ "$1" = 0 ]
then
	output=$(systemctl is-system-running 2> /dev/null)
	if [ "$?" == 127 ]
	then
		chkconfig %NAME% off
	elif [ "$?" == 0 ] || ( [ "$output" != "offline" ] && [ "$output" != "unknown" ] )
	then
		systemctl disable %NAME%.service
	else
		chkconfig %NAME% off
	fi
fi

%files
%defattr(-,root,root)
%config(noreplace) /etc/beegfs/*
%config(noreplace) /etc/default/%NAME%
/etc/init.d/%NAME%
/opt/beegfs/sbin/%NAME%
/usr/lib/systemd/system/%NAME%.service
