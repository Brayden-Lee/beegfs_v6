#include <common/app/log/LogContext.h>
#include <common/toolkit/VersionTk.h>
#include "TestVersionTk.h"


TestVersionTk::TestVersionTk()
{
}

TestVersionTk::~TestVersionTk()
{
}

void TestVersionTk::setUp()
{
}

void TestVersionTk::tearDown()
{
}

void TestVersionTk::testEncodeAndDecode()
{
   LogContext log("TestVersionTk");

   log.log(Log_DEBUG, "testEncodeAndDecode started");

   // encode/decode major/minor/releaseNum with low numbers
   {
      unsigned encodeMajor = 6;
      unsigned encodeMinor = 8;
      unsigned encodeReleaseNum = 1;

      unsigned encodedVersion = BEEGFS_VERSION_NUM_ENCODE(encodeMajor, encodeMinor,
         encodeReleaseNum);

      unsigned decodeMajor;
      unsigned decodeMinor;
      unsigned decodeReleaseNum;

      BEEGFS_VERSION_NUM_DECODE(encodedVersion, decodeMajor, decodeMinor, decodeReleaseNum);

      CPPUNIT_ASSERT_EQUAL(encodeMajor, decodeMajor);
      CPPUNIT_ASSERT_EQUAL(encodeMinor, decodeMinor);
      CPPUNIT_ASSERT_EQUAL(encodeReleaseNum, decodeReleaseNum);
   }

   // encode/decode major/minor/releaseNum with high numbers
   {
      unsigned encodeMajor = 222;
      unsigned encodeMinor = 12;
      unsigned encodeReleaseNum = 211;

      unsigned encodedVersion = BEEGFS_VERSION_NUM_ENCODE(encodeMajor, encodeMinor,
         encodeReleaseNum);

      unsigned decodeMajor;
      unsigned decodeMinor;
      unsigned decodeReleaseNum;

      BEEGFS_VERSION_NUM_DECODE(encodedVersion, decodeMajor, decodeMinor, decodeReleaseNum);

      CPPUNIT_ASSERT_EQUAL(encodeMajor, decodeMajor);
      CPPUNIT_ASSERT_EQUAL(encodeMinor, decodeMinor);
      CPPUNIT_ASSERT_EQUAL(encodeReleaseNum, decodeReleaseNum);
   }

   // decode a number generated by fhgfs-version script
/*   {
      // the version string from fhgfs-version for this code is: "2013.01-git16.133353"
      unsigned generatedVersionCode = 17629456;
      unsigned generatedVersionCodeCopy = generatedVersionCode;

      unsigned encodeYear = 2013;
      unsigned encodeMonth = 1;
      unsigned encodeReleaseNum = 16;

      unsigned decodeYear;
      unsigned decodeMonth;
      unsigned decodeReleaseNum;

      BEEGFS_VERSION_NUM_DECODE(generatedVersionCode, decodeYear, decodeMonth, decodeReleaseNum);

      CPPUNIT_ASSERT_EQUAL(encodeYear, decodeYear);
      CPPUNIT_ASSERT_EQUAL(encodeMonth, decodeMonth);
      CPPUNIT_ASSERT_EQUAL(encodeReleaseNum, decodeReleaseNum);

      // to make sure that BEEGFS_VERSION_NUM_DECODE doesn't mess with the original version code
      CPPUNIT_ASSERT_EQUAL(generatedVersionCodeCopy, generatedVersionCode);
   } */

   log.log(Log_DEBUG, "testEncodeAndDecode finished");
}

void TestVersionTk::testComparison()
{
   LogContext log("TestVersionTk");

   log.log(Log_DEBUG, "testComparison started");

   // the version string from the fhgfs-version script for this code is: "17.03-beta1"
   unsigned generatedVersionCode = 34669313;
   unsigned generatedVersionNum = BEEGFS_VERSION_NUM_STRIP(generatedVersionCode);

   // values: A < B < C < generatedVersionNum < D < E

   unsigned encodedVersionA = BEEGFS_VERSION_NUM_ENCODE(8, 2, 10);
   unsigned encodedVersionB = BEEGFS_VERSION_NUM_ENCODE(8, 10, 2);
   unsigned encodedVersionC = BEEGFS_VERSION_NUM_ENCODE(16, 10, 2);
   unsigned encodedVersionD = BEEGFS_VERSION_NUM_ENCODE(17, 6, 1);
   unsigned encodedVersionE = BEEGFS_VERSION_NUM_ENCODE(225, 12, 222);

   // simple low-level direct comparison

   CPPUNIT_ASSERT(encodedVersionA < encodedVersionB);
   CPPUNIT_ASSERT(encodedVersionB < encodedVersionC);
   CPPUNIT_ASSERT(encodedVersionC < generatedVersionNum);
   CPPUNIT_ASSERT(generatedVersionNum < encodedVersionD);
   CPPUNIT_ASSERT(encodedVersionD < encodedVersionE);

   // compare with VersionTk helper method

   CPPUNIT_ASSERT(VersionTk::checkRequiredRelease(encodedVersionB, encodedVersionB) );
   CPPUNIT_ASSERT(VersionTk::checkRequiredRelease(generatedVersionCode, generatedVersionCode) );

   CPPUNIT_ASSERT(VersionTk::checkRequiredRelease(encodedVersionB, encodedVersionC) );
   CPPUNIT_ASSERT(VersionTk::checkRequiredRelease(encodedVersionC, encodedVersionD) );
   CPPUNIT_ASSERT(VersionTk::checkRequiredRelease(encodedVersionA, generatedVersionCode) );

   CPPUNIT_ASSERT(!VersionTk::checkRequiredRelease(encodedVersionC, encodedVersionB) );
   CPPUNIT_ASSERT(!VersionTk::checkRequiredRelease(generatedVersionCode, encodedVersionA) );

   log.log(Log_DEBUG, "testComparison finished");
}

