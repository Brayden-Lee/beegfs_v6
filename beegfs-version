#!/bin/bash

#
# this file defines the beegfs version for shell build/packaging scripts, so it
# has to be sourcable.
# to override the values, export $BEEGFS_VERSION
# (see define_numeric_version_code() comments for format requirements.)
#

# echo to stderr
echoerr()
{
   echo "$@" 1>&2
}

# print usage information
print_usage_and_exit()
{
   echo "Arguments (only one of them may be specified):"
   echo
   echo "   --help / -h              print help and exit"
   echo "   --print_version          print BEEGFS_VERSION result"
   echo "   --print_major_version    print BEEGFS_MAJOR"
   echo "   --print_minor_version    print BEEGFS_MINOR"
   echo "   --print_version_code     print BEEGFS_VERSION_CODE result"
   echo "   --verbose                print given values and result values"

   exit 1
}

# parse command line arguments and set corresponding variables
parse_agruments()
{
   PARAM=$1

   if [ -z "$1" ]; then
      return 0
   fi

   case $PARAM in
      -h | --help)
         print_usage_and_exit
         ;;
      --print_version)
         param_print_version=1
         ;;
      --print_major_version)
         param_print_major_version=1
         ;;
      --print_minor_version)
         param_print_minor_version=1
         ;;
      --print_version_code)
         param_print_version_code=1
         ;;
      --verbose)
         param_verbose=1
         ;;
      *)
         echoerr "Error: Unknown parameter: '$PARAM'"
         exit 1
         ;;
   esac
}

# default values for internal git builds.
# these are not the actual variables that you want to override externally for
# stable or beta releases.
#
# version default is "current year (-2000)"."month".git"day", e.g. 
# "15.08.git25" (built on Aug 25, 2015).
define_internal_version_defaults()
{
   _default_major=`date +%-y`
   _default_minor=`date +%-m`
   _default_release_suffix=git`date +%-d`
}

parse_release_suffix()
{
   local release_suffix=$1

   release_type=stable # default value
   release_num=0 # release num always 0 for stable releases

   # test for beta release string ("beta...")
   local is_beta_rel_str=`echo $release_suffix | grep -E '^beta[0-9][0-9]?[0-9]?$'`
   if [ ! -z "$is_beta_rel_str" ]; then
      release_type=`echo $release_suffix | sed -r s/[0-9]+//`
      release_num=`echo $release_suffix | sed -r s/beta//`
   fi

   # test for internal build release string ("gitNUM1")
   local is_git_rel_str=`echo $release_suffix | grep -E '^git[0-9]+$'`
   if [ ! -z "$is_git_rel_str" ]; then
      release_type=`echo $release_suffix | sed -r s/[0-9]+//`
      release_num=`echo $release_suffix | sed -r s/git//`
   fi
}

# assemble numeric beegfs version code from separate parameters.
# this is not intended to be called only by define_numeric_version_code and not
# directly.
#
# format of BEEGFS_VERSION_CODE is (4 bytes):
# 1 byte release_type number
# 1 byte major_version
# 1 byte minor_version
# 1 byte release_num (only relevant for beta releases)
assemble_numeric_version_code()
{
   local release_type=$1
   local ver_major=$2
   local ver_minor=$3
   local release_num=$4

   local max_one_byte_val=255

   # define $release_type_num from $release_type

   case $release_type in
      git)
         release_type_num=1
         ;;
      beta)
         release_type_num=2
         ;;
      stable)
         release_type_num=3
         ;;
      *)
         echoerr "Error: release_type=$release_type: format is invalid"
         exit 1
         ;;
   esac

   local is_major_ver_format_valid=`echo $ver_major | grep -E '^[1-9][0-9]*[0-9]*$'`

   if [ -z "$is_major_ver_format_valid" ]; then
      echoerr "Error: major version format is invalid: ${ver_major}"
      exit 1;
   fi

   local is_minor_ver_format_valid=`echo $ver_minor | grep -E '^[0-9][0-9]*[0-9]*$'`

   if [ -z "$is_minor_ver_format_valid" ]; then
      echoerr "Error: minor version format is invalid: ${ver_minor}"
      exit 1;
   fi

   # check ranges
   if [ $ver_major -gt $max_one_byte_val ]; then
      echoerr "Error: ver_major=$ver_major: format is invalid"
      exit 1
   fi

   if [ $ver_minor -gt $max_one_byte_val ]; then
      echoerr "Error: ver_minor=$ver_minor format is invalid"
      exit 1
   fi

   if [ $release_num -gt $max_one_byte_val ]; then
      echoerr "Error: release_num=$release_num: format is invalid"
      exit 1
   fi

   # compute final BEEGFS_VERSION_CODE integer.
   # note: $[...] interprets leading 0s as octal values, so make sure
   # to not have any

   BEEGFS_VERSION_CODE=$[                       \
      $release_type_num * 256 * 256 * 256 +     \
      $ver_major * 256 * 256 +                  \
      $ver_minor * 256 +                        \
      $release_num                              \
      ]
}

# defines the debian version for .deb packaging
# note: not related to the actual beegfs version, just another variable used in
# build/packaging scripts
define_debian_version()
{
   DEBIAN_VERSION=`lsb_release -r -s | sed -e 's/\..*$//'`
}

#
############### END OF FUNCTION DEFINITIONS ###############
#

parse_agruments $*

if [ ! -z "$param_show_help" ]; then
   print_usage_and_exit
fi

# print initial verbose info
if [ ! -z "$param_verbose" ]; then
   echo Given values: BEEGFS_VERSION=\'$BEEGFS_VERSION\'
fi

# define default versions based on current date/time for internal git builds
define_internal_version_defaults

# these are the variables that are to be used in build scripts.
# values can be overridden on the shell by
#  "export BEEGFS_VERSION=...".
# (if it is undefined, the internal git build defaults will be used)
if [ ! -z "${BEEGFS_VERSION}" ]; then
   beegfs_major_version=`echo ${BEEGFS_VERSION} | cut -d . -f 1`
   beegfs_minor_version=`echo ${BEEGFS_VERSION} | cut -d - -f 1 | cut -d . -f 2`
   beegfs_release_suffix=`echo ${BEEGFS_VERSION}- | cut -d - -f 2`
else
   beegfs_major_version=$_default_major
   beegfs_minor_version=$_default_minor
   beegfs_release_suffix=$_default_release_suffix
   BEEGFS_VERSION="$beegfs_major_version.$beegfs_minor_version-$beegfs_release_suffix"
fi

parse_release_suffix $beegfs_release_suffix

# do the actual work
assemble_numeric_version_code $release_type $beegfs_major_version $beegfs_minor_version $release_num 

#if [ "$DEBUG" != "" -a -d "$(dirname $0)/.git" ]; then
#   BEEGFS_VERSION="$BEEGFS_VERSION ($(git rev-parse HEAD))"
#fi

# miscellaneous other definitions for build scripts etc...
# (not related to the actual beegfs version definition)
define_debian_version


# special output (required when this is called from a makefile)

if [ ! -z "$param_print_version" ]; then
   echo $BEEGFS_VERSION
fi

if [ ! -z "$param_print_major_version" ]; then
   echo $beegfs_major_version
fi

if [ ! -z "$param_print_minor_version" ]; then
   echo $beegfs_minor_version
fi

if [ ! -z "$param_print_version_code" ]; then
   echo $BEEGFS_VERSION_CODE
fi

# print final verbose info
if [ ! -z "$param_verbose" ]; then
   echo Result values: BEEGFS_VERSION=\'$BEEGFS_VERSION\', \
      BEEGFS_VERSION_CODE=\'$BEEGFS_VERSION_CODE\'
fi
